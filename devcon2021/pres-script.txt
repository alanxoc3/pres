Alright, thanks x.

As x mentioned, I'm alan. I'm a Software Engineer here at Clearwater Analytics.
I've been using Linux for about 10 years now. And I'm obsessed with the command
line.

Whether you consider yourself a commandline expert or novice, my goal is inspire you to
use the commandline a little more than you currently do in your daily workflow.

Now this presentation will be a little different than what you may be used
to, because everything you see on this screen for the next 40 minutes, or so,
will be completely contained within a terminal interface.

And when I say everything, I mean everything.

<title>

the command line

What you see here is probably the coolest part of the presentation, so i'll
let you soak it in for a minute. i actually have a keylogger running at the
bottom right of the screen, if you feel lost, i hope that helps, and i'll try
not to type any sensitive passwords for you.

the terminal emulator i'm using is called alacritty, the bottom bar you see is from
me running tmux locally, the top bar is from me running tmux remotely through ssh on
an arch linux machine. and the powerpoint-like presentation software i'm using
is called lookatme.

now that i got that out of the way, let's continue by talking about the "unix
philosophy".

There are many definitions of the "Unix Philosophy", the one i like most is
attributed to Douglas McIlroy he was the creator of the unix pipe and one of
the founding architects of unix at Bell Labs in the 1970s. he said.

"this is the unix philosophy: write programs that do one thing and do it well.
write programs to work together. write programs to handle text streams, because
that is a universal interface."

i really like the guiding principles of the unix philosophy. in my opinion,
this is what has made the commandline so powerful, scriptable, and overall just
fun to use.

keep that in the back of you mind. from here i'll go over some of the history
of the command line, then you can watch me run a bunch of random commands. if
we're lucky, nothing will go wrong.



--








Before we get into any more details.
Let's start with shell basics.

What do these all share in common? The unix philosophy.

Douglas McIlroy is one of the people who worked on Unix at Bell Labs. He said
this about the unix philosophy.

---

Oh, what if the "one thing and do it well"

What if I divided my presentation into parts of the Unix Philosophy?

Write programs that do one thing and do it well:
- How many times have you had to handle authentication in your program?
- How many different libraries are there for authentication?
- Wouldn't it be nice if every program on your computer didn't have its own file -> open menu?
- What if reading a blog only contained text?

Write programs to work together: (work with robots)
- Wouldn't it be nice if you didn't have to write everything in one language?
- Automation likes text streams.
- Text streams are lower latency.

Write programs to handle text streams: (work with humans
- man pages
- help commands
- good user interfaces
- Text streams are both human and machine readable.

programs that work well with other programs
programs that work well with humans

are there frameworks that let computers work well with GUIs? Yes. Are those
frameworks massively complex? Also yes.

i'm preparing for this presentation and want to ensure what i plan on saying is
correct. i could just make some selections and execute a command on each one.

| g++ -x c++ -
in kak: which <cmd> | zsh (shows if things are actually executables or not.)

ps $$ | python3 -c 'import sys; print(sys.stdin.read().split()[-1])' | xargs
